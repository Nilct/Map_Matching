digraph "Track"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Track\n||+ addPoint()\l+ applyThresholdToBox()\l+ delPointGPS()\l+ getNoOfPoints()\l+ getPoints()\l+ getPointsAsPointer()\l+ infos()\l+ outputInfos()\l+ readFromCSV()\l+ spaceFilter()\l+ temporalFilter()\l+ Track()\l+ updateBox()\l+ ~Track()\l* m_xMin\l* m_xMax\l* m_yMin\l* m_yMax\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{QObject\n||}",height=0.2,width=0.4,color="grey75"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_trackFullName" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75",tooltip="STL class. "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{std::basic_string\<\l char \>\n||}",height=0.2,width=0.4,color="grey75",tooltip="STL class. "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_points" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{std::vector\< PointGPS * \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{PointGPS\n|# m_altitude\l# m_timeStamp\l|+ addEmissionProbability()\l+ altitude()\l+ infos()\l+ PointGPS()\l+ PointGPS()\l+ timeStamp()\l+ updateProbability()\l}",height=0.2,width=0.4,color="black",URL="$class_point_g_p_s.html"];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{Point\n|# POINT_RADIUS\l|+ distanceToPoint()\l+ distanceToSegment()\l+ infos()\l+ Point()\l+ Point()\l+ projectionOnSegment()\l+ samePointAs()\l+ setx()\l+ x()\l+ ~Point()\l* x()\l* setx()\l* y()\l* sety()\l* m_x\l* m_y\l}",height=0.2,width=0.4,color="black",URL="$class_point.html",tooltip="The Point class. "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +m_emissionProbability" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{std::vector\< EmissionProbability \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{EmissionProbability\n|# m_distance\l# m_probability\l# m_roadId\l|+ distance()\l+ EmissionProbability()\l+ probability()\l+ roadId()\l+ updateProbability()\l}",height=0.2,width=0.4,color="black",URL="$class_emission_probability.html"];
}
