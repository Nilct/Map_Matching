digraph "Grid"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Grid\n|# counter\l|+ addRoad()\l+ buildMarkovMatrix()\l+ computeDistanceFraction()\l+ getDistanceBetweenProjections()\l+ getDistanceToExtremity()\l+ getNoOfPoints()\l+ getNoOfRoads()\l+ getPoints()\l+ getProjectedPointAndDistance()\l+ getRoadEntry()\land 20 more...\l* m_xMin\l* m_xMax\l* m_yMin\l* m_yMax\l* m_xMinGrid\l* m_xMaxGrid\l* m_yMinGrid\l* m_yMaxGrid\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{QObject\n||}",height=0.2,width=0.4,color="grey75"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +m_vectorOfPoints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{std::vector\< PointRoad \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{PointRoad\n|# m_id\l# m_isNode\l# counter\l|+ id()\l+ infos()\l+ isNode()\l+ outputInfos()\l+ PointRoad()\l+ PointRoad()\l+ setid()\l+ updateBelongToRoad()\l+ vectorOfRoadId()\l}",height=0.2,width=0.4,color="black",URL="$class_point_road.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{Point\n|# POINT_RADIUS\l|+ distanceToPoint()\l+ distanceToSegment()\l+ infos()\l+ Point()\l+ Point()\l+ projectionOnSegment()\l+ samePointAs()\l+ setx()\l+ x()\l+ ~Point()\l* m_x\l* m_y\l* x()\l* setx()\l* y()\l* sety()\l}",height=0.2,width=0.4,color="black",URL="$class_point.html",tooltip="The Point class. "];
  Node6 -> Node4 [color="grey25",fontsize="10",style="solid",label=" #m_vectorOfRoadId" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{std::vector\< long \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_gridFullName" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75",tooltip="STL class. "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{std::basic_string\<\l char \>\n||}",height=0.2,width=0.4,color="grey75",tooltip="STL class. "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #m_mapOfExtPoints" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{std::unordered_map\l\< PointRoad, int, hashFunc,\l equalsFunc \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +m_mapOfAllRoads" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{std::unordered_map\l\< long, Road \>\n|+ keys\l|}",height=0.2,width=0.4,color="grey75"];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{Road\n|# m_edgeId\l|+ addNeighbor()\l+ addPoint()\l+ edgeId()\l+ getIntersectionIDWith()\l+ getNoOfNeighbors()\l+ outputInfos()\l+ Road()\l+ Road()\l+ vectorOfPointsId()\l+ ~Road()\l}",height=0.2,width=0.4,color="black",URL="$class_road.html",tooltip="Road is an element of a network. Road are strongly linked with Points. "];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +m_setOfNeighbors" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{std::set\< long \>\n|+ keys\l|}",height=0.2,width=0.4,color="grey75"];
  Node13 -> Node11 [color="grey25",fontsize="10",style="solid",label=" #m_vectorOfPointsId" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{std::vector\< int \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75"];
}
