#include "geomaticsprojet.h"
#include "qgisinterface.h"
#include "qgsmessagelog.h"
#include <QAction>

// Static variables for plugin description
static const QString sName = QObject::tr("GeomaticsProject");
static const QString sDescription = QObject::tr("This is Geomatics Project");
static const QString sCategory = QObject::tr("Geomatics Project");
static const QString sPluginVersion = QObject::tr("Version 1.0");
static const QgisPlugin::PLUGINTYPE sPluginType = QgisPlugin::UI;
static const QString sPluginIcon = "";

GeomaticsProjet::GeomaticsProjet(QgisInterface * interface)
    : QgisPlugin(sName, sDescription, sCategory, sPluginVersion, sPluginType)
    , m_GISInterface(interface)
    , m_action(nullptr)
{
}

void GeomaticsProjet::initGui()
{
   std::cout << "GeomaticsProject::initGui" << std::endl;

   // Creates the action
   m_action = new QAction(QIcon(""), tr("Geomatics projet"), this);
   m_action->setWhatsThis(tr("Launches the geomatics projet"));

   // Connects the triggered signal to the slot
   connect(m_action, SIGNAL(triggered()), this, SLOT(run()));

   // Adds the action to the menu
   m_GISInterface->addRasterToolBarIcon(m_action);
   m_GISInterface->addPluginToMenu(tr("&Geomatics projet"), m_action);
}

int GeomaticsProjet::run(int argc, char *argv[])
{
    QgsMessageLog::instance()->logMessage("Geomatics projet launched", "Geomatics projet", QgsMessageLog::INFO);

    QApplication app(argc, argv);

    Loading fenetre;
    // affichage de la fenetre
    fenetre.show();

    return app.exec();
}

void GeomaticsProjet::unload()
{
    QgsMessageLog::instance()->logMessage("Geomatics projet unloaded", "Geomatics projet", QgsMessageLog::INFO);
}

//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////

QGISEXTERN QgisPlugin * classFactory(QgisInterface * theQgisInterfacePointer)
{
  return new GeomaticsProjet(theQgisInterfacePointer);
}

QGISEXTERN QString name()
{
  return sName;
}

QGISEXTERN QString description()
{
  return sDescription;
}

QGISEXTERN QString category()
{
  return sCategory;
}

QGISEXTERN int type()
{
  return sPluginType;
}

QGISEXTERN QString version()
{
  return sPluginVersion;
}

QGISEXTERN QString icon()
{
  return sPluginIcon;
}

QGISEXTERN void unload( QgisPlugin * thePluginPointer )
{
  delete thePluginPointer;
}
